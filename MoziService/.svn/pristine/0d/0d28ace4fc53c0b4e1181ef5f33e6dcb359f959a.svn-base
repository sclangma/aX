# -*- coding:utf-8 -*-
# Author:Liao

"""
作战单元（飞机、防空导弹和雷达站等，不包含武器和传感器）的其他操作：
        获取详细信息
        攻击作战行动：自动攻击，手动分配武器攻击，纯方位攻击
        反潜作战行动：投放声呐
        航线规划
        设置油门，期望速度和期望高度
        航线规划
        空中作战行动（对飞机下达起飞指令）
        分配任务和退出已加入任务
"""

from MoziService.entitys.global_util import *
from MoziService.entitys.operatorbase import DoctrineOperator
import MoziService.entitys.commonfunction as cf
import MoziService.entitys.database as db


class Unit(DoctrineOperator):
    def __init__(self):
        sel_category = SelectorCategory.Unit
        self.sensors = {}
        self.mounts = {}
        self.magazines = {}
        self.way_points = {}

        # 对象类名
        self.ClassName = ""
        # 名称
        self.strName = ""
        # Guid
        self.strGuid = ""
        # 地理高度
        self.fAltitude_AGL = 0.0
        # 海拔高度
        self.iAltitude_ASL = 0
        # 所在推演方ID
        self.m_Side = ""
        # 实体类别
        self.strUnitClass = ""
        # 当前纬度
        self.dLatitude = 0.0
        # 当前经度
        self.dLongitude = 0.0
        # 当前朝向
        self.fCurrentHeading = 0.0
        # 当前速度
        self.fCurrentSpeed = 0.0
        # 当前海拔高度
        self.fCurrentAltitude_ASL = 0.0
        # 倾斜角
        self.fPitch = 0.0
        # 翻转角
        self.fRoll = 0.0
        # 获取期望速度
        self.fDesiredSpeed = 0.0
        # 获取最大油门
        self.m_MaxThrottle = 0
        # 最大速度
        self.fMaxSpeed = 0.0
        # 最小速度
        self.fMinSpeed = 0.0
        # 当前海拔高度#当前高度
        self.fCurrentAlt = 0.0
        #  获取期望高度#期望高度
        self.fDesiredAlt = 0.0
        # 最大高度
        self.fMaxAltitude = 0.0
        # 最小高度
        self.fMinAltitude = 0.0
        # 军标ID
        self.strIconType = ""
        # 普通军标
        self.strCommonIcon = ""
        # 数据库ID
        self.iDBID = 0
        # 是否可操作
        self.bIsOperating = False
        # 编组ID
        self.m_ParentGroup = ""
        # 停靠的设施的ID(关系)
        self.m_DockedUnits = ""
        # 实体的停靠设施(部件)
        self.m_DockFacilitiesComponent = ""
        # 停靠的飞机的ID(关系)
        self.m_DockAircrafts = ""
        # 实体的航空设施(部件)
        self.m_AirFacilitiesComponent = ""
        # 实体的通信设备及数据链(部件)
        self.m_CommDevices = ""
        # 实体的引擎(部件)
        self.m_Engines = ""
        # 传感器，需要构建对象类,所以只传ID
        self.m_Sensors = ""
        # 挂架
        self.m_Mounts = ""
        # 毁伤状态
        self.strDamageState = ""
        # 失火
        self.iFireIntensityLevel = 0
        # 进水
        self.iFloodingIntensityLevel = 0
        # 分配的任务
        self.m_AssignedMission = ""
        # 作战条令
        self.m_Doctrine = ""
        # 系统右栏->对象信息->作战单元武器
        self.m_UnitWeapons = ""
        # 路径点
        self.m_WayPoints = ""
        # 训练水平
        self.m_ProficiencyLevel = 0
        # 是否是护卫角色
        self.bIsEscortRole = False
        # 当前油门
        self.m_CurrentThrottle = 0
        # 通讯设备是否断开
        self.bIsCommsOnLine = False
        self.bIsIsolatedPOVObject = False
        # 地形跟随
        self.bTerrainFollowing = False
        self.bIsRegroupNeeded = False
        # 保持阵位
        self.bHoldPosition = False
        # 是否可自动探测
        self.bAutoDetectable = False
        # 当前货物
        self.m_Cargo = ""
        # 燃油百分比，作战单元燃油栏第一个进度条的值
        self.dFuelPercentage = 0.0
        # 获取AI对象的目标集合# 获取活动单元AI对象的每个目标对应显示不同的颜色集合
        self.m_AITargets = ""
        # 获取活动单元AI对象的每个目标对应显示不同的颜色集合
        self.m_AITargetsCanFiretheTargetByWCSAndWeaponQty = ""
        # 获取单元的通讯链集合
        self.m_CommLink = ""
        # 获取传感器
        self.m_NoneMCMSensors = ""
        # 获取显示"干扰"或"被干扰"
        self.iDisturbState = 0
        # 单元所属多个任务数量
        self.iMultipleMissionCount = 0
        # 单元所属多个任务guid拼接
        self.m_MultipleMissionGUIDs = ""
        # 是否遵守电磁管控
        self.bObeysEMCON = False
        # 武器预设的打击航线
        self.m_strContactWeaponWayGuid = ""
        # 停靠参数是否包含码头
        self.bDockingOpsHasPier = False
        # 弹药库
        self.m_Magazines = ""
        # 被摧毁
        self.dPBComponentsDestroyedWidth = 0.0
        # 轻度
        self.dPBComponentsLightDamageWidth = 0.0
        # 中度
        self.dPBComponentsMediumDamageWidth = 0.0
        # 重度
        self.dPBComponentsHeavyDamageWidth = 0.0
        # 正常
        self.dPBComponentsOKWidth = 0.0
        # 配属基地
        self.m_HostActiveUnit = ""
        # 状态
        self.strActiveUnitStatus = ""

    def get_information(self):
        """
        获取本单元详细信息
        :return:dict, 例：{"unitstate":"Unassigned","heading":0.0,"type":"Facility","fuelstate":"None","longitude":49.878556388303,"latitude":40.532345887538,
                            "altitude":18.0,"subtype":"3002","autodetectable":False,"side":"蓝方","proficiency":"Regular","name":"地空导弹营(SA-2f)","speed":0.0,
                            "weaponstate":"None","guid":"65e4a622-909e-47be-8b57-f49f5e580271"}
        """
        lua_arg = cf.get_lua_table2json() + cf.get_lua_unit_str() % self.guid
        return self.get_server_json_data(lua_arg)

    def get_mounts_info(self):
        """
        获取挂架信息
        :return:
        """
        info = []
        for guid, mount_obj in self.mounts.items():
            info.append({
                "mount_guid": guid,
                "mount_dbid": mount_obj.iDBID,
                "mount_name": mount_obj.strName,
                "mount_weapons": cf.parse_weapons_record(mount_obj.m_LoadRatio)
            })
        return info

    def ScenEdit_SetUnit(self,guid,longitude,latitude,mozi_task):
        '''
        设置单元属性
        :param strGuid:
        :param longitude:
        :param latitude:
        :param mozi_task:
        :return:
        '''
        lua_str = "ScenEdit_SetUnit({side= '红方', guid='%s', course={ { Description = ' ', TypeOf = 'ManualPlottedCourseWaypoint', longitude = %s, latitude = %s } } })" % (guid, longitude, latitude)
        mozi_task.sendAndRecv(lua_str)


    def get_valid_weapons(self):
        """
        获取可有效的武器
        :return: dict
        """
        info = {}
        for mount_obj in self.mounts.values():
            if (mount_obj.strWeaponFireState == "就绪" or "秒" in mount_obj.strWeaponFireState) \
                and mount_obj.m_ComponentStatus <= 1:
                mount_weapons = cf.parse_weapons_record(mount_obj.m_LoadRatio)
                for w_record in mount_weapons:
                    w_dbid = w_record['wpn_dbid']
                    if db.check_weapon_attack(w_dbid):
                        if w_dbid in info:
                            info[w_dbid] += w_record['wpn_current']
                        else:
                            info[w_dbid] = w_record['wpn_current']
        return info

    def get_weapon_info(self):
        """
        获取未被摧毁的可攻击武器
        :return: list
        """
        info = []
        for mount_obj in self.mounts.values():
            if mount_obj.m_ComponentStatus <= 1:
                mount_weapons = cf.parse_weapons_record(mount_obj.m_LoadRatio)
                if len(mount_weapons) > 0:
                    mount_info = []
                    for w_record in mount_weapons:
                        w_dbid = w_record['wpn_dbid']
                        if db.check_weapon_attack(w_dbid):
                            w_name, w_type = db.get_weapon_name_type(w_dbid)
                            mount_info.append({
                                'dbid': w_dbid,
                                'status': mount_obj.strWeaponFireState,
                                'type': w_type,
                                'count':w_record['wpn_current'],
                                'name':w_name
                            })

                    if mount_info != []:
                        info.append(mount_info)
        return info

    def get_way_points_info(self):
        info = []
        if self.m_WayPoints != "":
            guid_list = self.m_WayPoints.split("@")
            for guid in guid_list:
                point_obj = self.way_points[guid]
                info.append({
                "longitude": point_obj.dLongitude,
                "Description": point_obj.strWayPointDescription,
                "TypeOf": waypointtype2str[point_obj.m_WaypointType],
                "latitude": point_obj.dLatitude})
        return info

    def get_sensors_info(self):
        info = []
        for guid, sensor_obj in self.sensors.items():
            info.append({
                "sensor_isactive": sensor_obj.bActive,
                "sensor_status": sensor_obj.strWorkStatus,
                "sensor_maxrange": sensor_obj.fMaxRange,
                "sensor_dbid": sensor_obj.iDBID,
                "sensor_role": 0 if sensor_obj.m_SensorRole == "" else int(sensor_obj.m_SensorRole),
                "sensor_name": sensor_obj.strName,
                "sensor_type": sensor_obj.m_SensorType,
                "sensor_guid": guid
            })
        return info

    def get_target_by_info(self):
        if self.m_AITargets:
            return self.m_AITargets.split('@')
        else:
            return []

    def delete_sub_object(self):
        del_list = list(self.sensors.keys())
        del_list.extend(self.mounts.keys())
        del_list.extend(self.magazines.keys())
        del_list.extend(self.way_points.keys())

        if self.doctrine is not None:
            del_list.append(self.doctrine.guid)
            del self.doctrine

        for guid, point in self.way_points.items():
            del_list.extend(point.delete_sub_object())
        for guid, mount_instance in self.mounts.items():
            del_list.extend(mount_instance.delete_sub_object())

        del self.sensors
        del self.mounts
        del self.magazines
        del self.way_points
        return del_list

    # ---------------------传感器部面板设置------------------------
    def EMCON_Obey_doctrine(self, is_obey):
        """
        实体传感器面板， 实体是否遵循电磁管控条令
        :param is_obey: bool(True 或 False)
        :return: void
        """
        state = str(is_obey).lower()
        self._mozi_task.unitObeysEMCON(self.guid, state)

    def switch_radar(self, switch_on):
        """
        实体传感器面板， 实体雷达开关机
        :param switch_on: bool(True 或 False)
        :return: void
        """
        set_str = str(switch_on).lower()
        return self._mozi_task.setUnitSensorSwitch(self.guid, set_str)

    # ---------------------选择实体，鼠标右键操作------------------------
   

    def get_valid_weapons_attack_target(self, contact_guid):
        """
        获取当前可打击目标的可用武器
        :param contact_guid:
        :return: dict
        """
        manual_info = self.attack_manual_info(contact_guid)
        if len(manual_info) == 1 and 'guid不存在' in list(manual_info.values())[0]:
            return {}
        else:
            valid_weapons = {}
            for w_info in manual_info:
                if w_info['IsFire'] == 1:
                    valid_weapons[w_info['dBID']] = w_info['number']
            return valid_weapons

    def attack_manual(self, contact_guid, mount_num, weapon_num, qty_num):
        """
        攻击一个接触作为武器部署后自动瞄准或手动瞄准的方式
        :param contact_id: 目标guid
        :param mount_num: 攻击者的装具 DBID
        :param weapon_num: 攻击者的武器 DBID
        :param qty_num: 分配数量
            table =  {mode=1,mount=2231,weapon=2868,qty=2}
        :return:
        """
        return self._mozi_task.manualAttackContact(self.guid, contact_guid,
                                                  "{mode=1,mount=" + str(mount_num) +
                                                  ",weapon=" + str(weapon_num) + ",qty=" + str(qty_num) + "}")

    def attack_weapon_allocate_to_target(self, target, weaponDBID, weapon_count):
        """
        实体手动攻击(打击情报目标), 或者纯方位攻击(打击一个位置)
        :param target: 情报目标guid 或  坐标-tuple(lat, lon)
        :param weaponDBID: int, 武器型号数据库id
        :param weapon_count: int, 分配数量
        :return:
        """
        if type(target) == str:
            table = "{TargetGUID ='" + target + "'}"
        elif type(target) == tuple:
            table = "{TargetLatitude =" + str(target[0]) + ", TargetLongitude = " + str(target[1]) + "}"
        else:
            raise Exception("target 参数错误")
        return self._mozi_task.allocateWeaponToTarget(self.guid, table, str(weaponDBID), str(weapon_count))

    def attack_weapon_salvo_to_target(self, target, weaponDBID):
        """
        实体手动分配一次齐射攻击(打击情报目标), 或者纯方位攻击(打击一个位置)
        :param target:情报目标guid，例："fruo-fs24-2424jj" 或  坐标-tuple(lat, lon)，例:(40.90,30.0)
        :param weaponDBID:武器型号数据库id
        :return:
        """
        if type(target) == str:
            table = "{TargetGUID ='" + target + "'}"
        elif type(target) == tuple:
            table = "{TargetLatitude =" + str(target[0]) + ", TargetLongitude = " + str(target[1]) + "}"
        else:
            raise Exception("target 参数错误")
        return self._mozi_task.allocateSalvoToTarget(self.guid, table, str(weaponDBID))

    def attack_drop_target(self, contact_guid):
        """
        实体放弃某个之前设定的目标
        :param contact_guid: str, 情报目标guid
        :return:
        """
        return self._mozi_task.unitDropTargetContact(self.side_name, self.guid, contact_guid)

    def attack_drop_target_all(self):
        """
        实体放弃所有目标，脱离接战
        :return:
        """
        return self._mozi_task.unitDropTargetAllContact(self.guid)

    def ignore_plotted_courseWhenAttacking(self, enum_ignore_plotted):
        """
        在攻击时是否忽略计划航线，是、否、与上级一致
        :param enum_ignore_plotted:IgnorePlottedCourseWhenAttacking
        :return:
        """
        if enum_ignore_plotted.value == 999:
            para_str = 'Inherited'
        elif enum_ignore_plotted == IgnorePlottedCourseWhenAttacking.Yes:
            para_str = 'Yes'
        elif enum_ignore_plotted == IgnorePlottedCourseWhenAttacking.No:
            para_str = 'No'
        else:
            raise Exception("参数错误")
        return self._mozi_task.lpcwAttackSUnit(self.side_name, self.guid, para_str)

   
    def follow_terrain(self, is_fellow):
        """
        设置当前单元（飞机）的飞行高度跟随地形
        :param is_fellow:bool, True:跟随地形
        :return:
        """
        set_str = str(is_fellow).lower()
        return self._mozi_task.sendAndRecv("ScenEdit_SetUnit(guid='" + str(self.guid) + "',  TEEEAINFOLLOWING =" + set_str + "})")

   
    
    def delete_coursed_point(self, point_index=None, clear=False):
        """
        单元删除航路点
        :param point_index: list:删除多个航路点 [0, 1], or int：删除一个航路点，
        :param clear: bool, True:清空航路点
        :return:
        """
        lua = ""
        if clear:
            if self.m_WayPoints != "":
                point_count = len(self.m_WayPoints.split("@"))
                for i in range(point_count-1, -1, -1):
                    lua += ('Hs_UnitOperateCourse("%s",%d,0.000000,0.000000,"Delete")' % (self.guid, i))
        else:
            if isinstance(point_index, list):
                if len(point_index) > 1 and point_index[-1] > point_index[0]:
                    point_index.reverse()
                for i in point_index:
                    lua += ('Hs_UnitOperateCourse("%s",%d,0.000000,0.000000,"Delete")' % (self.guid, i))
            elif isinstance(point_index, int):
                lua = "Hs_UnitOperateCourse('%s',%d,0.000000,0.000000,'Delete')" % (self.guid, point_index)
        if lua != "":
            self._mozi_task.sendAndRecv(lua)

    def return_to_base(self):
        """
        实体返航
        :return:
        """
        return self._mozi_task.returnToBas(self.guid)

    def select_new_base(self, base_guid):
        """
        实体选择新基地/新港口
        :param base_guid: 新基地的guid
        :return:
        """
        lua = "ScenEdit_SetUnit({unitname='%s',base='%s'})" % (self.guid, base_guid)
        return self._mozi_task.sendAndRecv(lua)
        
    def refuel(self, refule_unit_guid):
        """
        加油/补给
        :param refule_unit_guid: 加油机或补给船的guid, 如果为空，则自动选择
        :return:
        """
        pass

    def holdPositon(self, is_hold):
        """
        保持阵位-所选单元
        :param is_hold: bool, True:保持阵位，False:不保持
        :return:
        """
        set_str = str(is_hold).lower()
        return self._mozi_task.holdPositonSelectedUnit(self.guid, set_str)

    def quick_turnaround(self):
        """
        快速出动 
        :return:
        """
        pass

    def assign_to_mission(self, mission_name):
        """
        分配加入到任务中
        :param mission_name: str, 任务名称
        :return: table 存放单元的名称或GUID
        """
        return self._mozi_task.assignUnitListToMission(self.guid, mission_name)

    def assign_to_mission_escort(self, mission_name):
        """
        将单元分配为某打击任务的护航任务
        :param mission_name: 任务名称
        :return: table 存放单元的名称或者GUID
        """
        return self._mozi_task.assignUnitListToMissionEscort(self.guid, mission_name, 'true')

    def withdraw_from_mission(self):
        """
        将单元取消分配任务
        :return:
        """
        return self._mozi_task.cancelAssignUnitListToMission(self.guid)
    
 

    def setFuelQty(self, unitNameOrID, remainingFuel):
        '''
        设置单元燃油量
        strUnitNameOrID 单元 id 或 名称
        strRemainingFuel 油量
        '''
        return self.sendAndRecv("Hs_SetFuelQty('{}','{}')".format(unitNameOrID, remainingFuel))
    
   
    def set_unit_heading(self,guid,heading):
        '''
        设置朝向
        guid 单元朝向
        heading 朝向
        
        exampl
        set_unit_heading('016b72ba-2ab2-464a-a340-3cfbfb133ed1',30):
        '''
        lua_scrpt = "ScenEdit_SetUnit({guid = %s ,heading = %s})"%(guid,heading)
        self.sendAndRecv(lua_scrpt)
    
    def attack_auto(self, contact_guid):
        """
        自动攻击目标
        :param contact_guid: 目标guid
        :return:
        """
        return self._mozi_task.autoAttackContact(self.guid, contact_guid)

    def attack_manual_info(self, contact_guid):
        """
        手动攻击信息
        :param contact_guid: str, 目标guid
        :return:
        """
        lua = cf.get_lua_common_str()
        attack_info = 'message_info = Hs_PythonGetData({VERDICTWEAPONHIT=1,UNITGUID="%s",TARGETGUID="%s"})\n' % (self.guid, contact_guid)
        attack_info += "json = table_to_json(message_info)\nprint(json)"
        lua += attack_info
        manual_info = self.get_server_json_data(lua)
        weapon={}
        for i in manual_info:
            if i['message']=='OK'and i['number']>0:
                weapon[i['dBID']]=i['number']
                    
        return weapon

    def plotted_course(self, course_list):
        """
        实体航线规划
        :param course_list: list, [(lat, lon)], 例子：[(40, 39.0), (41, 39.0)]
        :return:
        """
        if not course_list:
            return
        course_para = "{ longitude=" + str(course_list[0][1]) + ",latitude=" + str(course_list[0][0]) + "}"
        for point in course_list[1:]:
            latitude = point[0]
            longitude = point[1]
            course_para = course_para + ",{ longitude=" + str(longitude) + ",latitude=" + str(latitude) + "}"
        cmd_str = "HS_LUA_SetUnit({side='" + self.side_name + "', guid='" + self.guid + "', course={" + course_para + "}})"
        return self._mozi_task.sendAndRecv(cmd_str)
    
    
    def set_desired_speed(self, desired_speed):
        """
        设置单元的期望速度
        :param desired_speed: float, 千米/小时
        :return: 所操作单元的完整描述子
        """
        if isinstance(desired_speed, int) or isinstance(desired_speed, float):
            message = "ScenEdit_SetUnit({guid='" + str(self.guid) + "', manualSpeed='" + str(desired_speed / 1.852) + "'})"
            return self._mozi_task.sendAndRecv(message)
        else:
            message = ""
            pass

    def set_throttle(self, enum_throttle):
        """
        设置实体油门
        :param enum_throttle: Throttle, 油门选择
        :return:
        """
        throttle_str = ""
        if enum_throttle == Throttle.Fullstop:
            throttle_str = "FullStop"
        if enum_throttle == Throttle.Loiter:
            throttle_str = "Loiter"
        if enum_throttle == Throttle.Full:
            throttle_str = "Full"
        if enum_throttle == Throttle.Flank:
            throttle_str = "Flank"
        if enum_throttle == Throttle.Cruise:
            throttle_str = "Cruise"
        if enum_throttle == Throttle.Unspecified:
            throttle_str = "None"
        lua_cmd = "ScenEdit_SetUnit({GUID='%s', THROTTLEPRESET='%s'})" % (self.guid, throttle_str)
        test = self._mozi_task.sendAndRecv(lua_cmd)
        print(test)

    def set_desired_height(self, desired_height):
        """
        设置单元的期望高度
        :param desired_height: 期望高度值, 海拔高度：m
        :return:
        """
        if isinstance(desired_height, int) or isinstance(desired_height, float):
            return self._mozi_task.sendAndRecv("ScenEdit_SetUnit(gu    id='" + str(self.guid) + "',  altitude =" + str(desired_height) + "})")
        else:
            pass
        
    def set_rader_shutdown(self,guid):
        '''
        设置雷达开关机
        guid : 要设置单元唯一标识（guid）
        '''
        lua_scrpt ='Hs_ScenEdit_SetUnitSensorSwitch({guid = %s,rader = true})'%(guid)
        mozi_task.sendAndRecv(manual_lua)        
        
    def set_rader_shutdown(self,guid):
        '''
        设置声纳开关机
        guid : 要设置单元唯一标识（guid）
        '''
        lua_scrpt ='Hs_ScenEdit_SetUnitSensorSwitch({guid = %s,sonar = true})'%(guid)
        mozi_task.sendAndRecv(manual_lua)
        
    def set_rader_shutdown(self,guid):
        '''
        设置干扰开关机
        guid : 要设置单元唯一标识（guid）
        '''
        lua_scrpt ='Hs_ScenEdit_SetUnitSensorSwitch({guid = %s,OECM = true})'%(guid)
        mozi_task.sendAndRecv(manual_lua)   
        
    def manual_pick_war(self,fire_unit_guid,target_guid,weapon_dbid,weapon_num):
        '''
        手动开火函数
        作者：解洋
        fire_unit_guid:开火单元guid
        target_guid : 目标guid
        weapon_dbid : 武器的dbid
        weapon_num : 武器数量
        '''
        manual_lua = 'Hs_ScenEdit_AllocateWeaponToTarget(\'%s\',{TARGETGUID=\'%s\'},%s,%s)'%(fire_unit_guid,target_guid,weapon_dbid,weapon_num)
        mozi_task.sendAndRecv(manual_lua)
        
        
    def unitops_singleout(self,base_guid,unit_guid):
        '''
        设置在基地内单元出动
        base_guid : 单元所在机场的guid
        unit_guid : 单元的guid
        return :
        lua执行成功/lua执行失败
        '''
        lua_script = "HS_LUA_AirOpsSingLeOut('%s',{'%s'})"%(base_guid,unit_guid)   